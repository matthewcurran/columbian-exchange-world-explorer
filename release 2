'"cOlumbian eXchange wOrld eXplorer", second release (build 029.07)
'Module 1
'Model/View
'Initializer functions.

'Copyright 2016 Matthew J Curran
'
'Licensed under the Apache License, Version 2.0 (the "License");
'you may not use this file except in compliance with the License.
'You may obtain a copy of the License at
'
'    http://www.apache.org/licenses/LICENSE-2.0
'
'Unless required by applicable law or agreed to in writing, software
'distributed under the License is distributed on an "AS IS" BASIS,
'WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
'See the License for the specific language governing permissions and
'limitations under the License.
'
'(first release here: http://www.snowflakefuture.com/2016/10/first-project-map-generator.html)
'New in this release (changes from first release):
'New dynamic map generation algorithm (now the animals are the primary map generators).
'Animals, new terrains, the entirety of Module 5 and Module 6.
'Added new terrain types: Forest, Mountains, Desert.
'New "Terrain Types" and "Species" worksheets (and NumReservedSheets has increased by 2).
'New "Herds" worksheet for each player (and NumSheetsPerPlayer has increased by 1).
'Optimized the worksheet formatting (e.g. FormatSheet).
'Modified FormatMasterMap() so that it now initializes LastMapRow and LastMapCol.
'Changed NumLibertiesRow (it had been identical to LastMapColStoredAtRow).
'Deleted some obsolete code.
'Modified LastRow and LastCol within ResetAllLibertiesToBlack().
'Modified the definition of legal move (under "Check if the new location is legal").
'Modified DecrementMovementsRemaining() to take terrain roughness into account.
'Updated Lighthouse Algorithm to deal with all terrain instead of only grass.
'Modified GenerateMapsForAllPlayers (abstracted some repeated code, and now calls UpdateHexView instead of ConvertHexView).
'Modified UpdateHexView to update only hexagonally connected tiles.
'Added a call to GetRandomLandTerrain within GenerateOneNewTile.
'Added a call to RollDiceForWildAnimal in GenerateOneNewTile.
'Added the flag InitializingIsFinishedGameHasBegun.
'Modified OneByOneToTwoByTwo to make use of WildAnimalColor and WildWaterCreatureColor.
'Changed comparison in OneByOneToTwoByTwo from "= xlContinuous" to "<> xlNone"
'Added calls to FormatSpeciesSheet and FormatTerrainTypesSheet in GenerateMapsForAllPlayers.
'Added {If ListOfSpecies = "" Then Exit Sub} to RollDiceForWildAnimals.
'Added EndTurnIsAutomatic feature.
'Added MovesRemaining label to joystick.
'Added scrolling buttons to joystick.
'Eliminated use of freezepanes (too buggy).
'Added GetHexColorCorrespondingToThisSquareViewTile,UpdateOneHex, and UpdateAllExploredHexes.
'Modified GenerateInitialMap.
'Renamed InitializeMasterMap to FormatMasterMap.
'And some other minor changes.

Option Explicit

Public ANewTileHasBeenExplored As Boolean
Public InitializingIsFinishedGameHasBegun As Boolean
Public EndTurnIsAutomatic  As Boolean

'Worksheet Indexes:
Public ActiveSquareIndex As Integer
Public ActiveHexIndex As Integer

'Color indexes (indices):
Public Const Water As Integer = 41
Public Const Black As Integer = 1
Public Const White As Integer = 2
Public Const Grey As Integer = 48
Public Const WildAnimalColor As Integer = Grey
Public Const WildWaterCreatureColor As Integer = 42
Public Const Grass As Integer = 4
Public Const Forest As Integer = 50
Public Const Mountains As Integer = 34
Public Const Desert As Integer = 45
Public Const LibertyColor As Integer = 56  'unexplored and might be land

Public Const NumReservedSheets = 3  ' "Map" "Terrain" and "Species"
Public Const NumSheetsPerPlayer = 3 ' a square view, a hexagonal view, a herd list.

Public Const FirstMapRow = 5
Public Const FirstMapCol = 4

Public Const FirstDebugRow = 30
Public Const DebuggingIsOn As Boolean = False
Public DebugRow As Integer

'The term 'liberty' (liberties) is borrowed from weiqi.
'In this game, it represents the number of unexplored tiles adjacent to the continent the active unit is on:
Public Const NumLibertiesRow = 10
Public NumLiberties As Integer

'Variables stored on each player's sheet:
Public Const LandPointsRow = 1
Public Const WaterPointsRow = 2
Public Const MovesRemainingRow = 3
Public Const MovesPerTurnRow = 4
Public Const ActiveUnitRowStoredAtRow = 12
Public Const ActiveUnitColStoredAtRow = 13
Public Const LastMapRowStoredAtRow = 18
Public Const LastMapColStoredAtRow = 19
Public Const LastHexColStoredAtRow = 20

'variables stored on worksheet "Map":
Public Const FirstPlayerRow = 6
'Public Const WhoseTurnRow = 21
Public Const TurnRowStoredAtRow = 22

'Formatting:
Public Const SquareColumnWidth As Single = 1.6

Const InitialMovesPerTurn As Integer = 2


Sub FormatSheet()
    Dim Col, Row As Integer
    'Make the left side grey:
    For Col = 1 To FirstMapCol - 1
        Columns(Col).Interior.ColorIndex = Grey
    Next Col
    'Make the top side grey:
    For Row = 1 To FirstMapRow - 1
        Rows(Row).Interior.ColorIndex = Grey
    Next Row
    
    'Make the info-for-user area white:
    Range("A1:B4").Interior.ColorIndex = White

    'Adjust column width:
    Cells.ColumnWidth = SquareColumnWidth
    Columns("A:A").ColumnWidth = 15     'explanatory text goes in col A.
    Columns("B:C").ColumnWidth = 2      'just numbers in cols B and C
End Sub

Sub FormatMasterMap()
    Application.StatusBar = "Initialize Master Map ()"
    
    Worksheets("Map").Select
    
    'Clear the map (not the data):
    Dim LastMapCol, Col As Integer
    LastMapCol = Cells(LastMapColStoredAtRow, 2).Value
    If LastMapCol >= FirstMapCol Then
        'Because deleting a column shift the col index of everything to the right,
        ' its much simpler to delete from right to left:
        For Col = LastMapCol To FirstMapCol Step -1
            Columns(Col).Delete
        Next Col
    End If
    
    'Make the whole map black:
    Cells.Interior.ColorIndex = Black
    'Set the col width and set Map edge to grey:
    Call FormatSheet
    
    Cells(TurnRowStoredAtRow, 1).Value = "Turn Row:"
    Cells(TurnRowStoredAtRow, 2).Value = FirstPlayerRow
    
    Cells(LastMapRowStoredAtRow, 1).Value = "farthest south:"
    Cells(LastMapRowStoredAtRow, 2).Value = 1
    
    Cells(LastMapColStoredAtRow, 1).Value = "farthest east:"
    Cells(LastMapColStoredAtRow, 2).Value = 1
End Sub

'For each player:
Sub FormatSquareSheet(WorksheetIndex As Integer)
    Application.StatusBar = "Format Sheet (WorksheetIndex)"
    
    Worksheets(WorksheetIndex).Select

    'Clear all the data and all the formatting:
    Cells.Delete
    
    'Make the whole map black:
    Cells.Interior.ColorIndex = Black
    'Set the col width and set Map edge to grey:
    Call FormatSheet

    'Initialize game data:
    Cells(LandPointsRow, 1).Value = "Land Points:"
    Cells(WaterPointsRow, 1).Value = "Water Points:"
    
    Cells(MovesPerTurnRow, 1).Value = "Moves Per Turn:"
    Cells(MovesPerTurnRow, 2).Value = InitialMovesPerTurn
    
    Cells(MovesRemainingRow, 1).Value = "Moves left:"
    Cells(MovesRemainingRow, 2).Value = InitialMovesPerTurn
    
    Cells(NumLibertiesRow, 1).Value = "#Liberties:"   'possible new land tiles adjacent to continent
    Cells(NumLibertiesRow, 2).Value = 0
    
    Cells(LastMapRowStoredAtRow, 1).Value = "farthest south:"
    Cells(LastMapColStoredAtRow, 1).Value = "farthest east:"
    Cells(LastHexColStoredAtRow, 1).Value = "farthest east in Hex View:"
    Cells(LastHexColStoredAtRow, 2).Value = FirstMapCol
    Cells(ActiveUnitRowStoredAtRow, 1).Value = "active unit row:"
    Cells(ActiveUnitColStoredAtRow, 1).Value = "active unit col:"
End Sub

Sub FormatHexSheet(WorksheetIndex As Integer)
    Application.StatusBar = "Format Hex Sheet (WorksheetIndex)"
    
    Worksheets(WorksheetIndex).Select

    'Clear all the data and all the formatting:
    Cells.Delete
    
    'Set the col width and set Map edge to grey:
    Call FormatSheet
    'Make more of the top side grey:
    Dim Row As Integer
    For Row = 5 To 8
        Rows(Row).Interior.ColorIndex = Grey
    Next Row

    'Write in explanatory text, and initialize game data:
    Cells(LandPointsRow, 1).Value = "Land Points:"
    Cells(LandPointsRow, 2).Value = 0
    
    Cells(WaterPointsRow, 1).Value = "Water Points:"
    Cells(WaterPointsRow, 2).Value = 0
    
    Cells(MovesRemainingRow, 1).Value = "Moves left:"
    Cells(MovesRemainingRow, 2).Value = InitialMovesPerTurn
    
    Cells(MovesPerTurnRow, 1).Value = "Moves Per Turn:"
    Cells(MovesPerTurnRow, 2).Value = InitialMovesPerTurn
    
    Cells(NumLibertiesRow, 1).Value = "#Liberties:"
End Sub

Sub GenerateInitialMap(WorksheetIndex As Integer, ByVal Row As Integer, ByVal Col As Integer)
    Application.StatusBar = "Generate Initial Map (WorksheetIndex, Row, Col)"
    ActiveSquareIndex = WorksheetIndex
    ActiveHexIndex = ActiveSquareIndex + 1
    
    Worksheets(WorksheetIndex).Select
    'Record the south-most and east-most explored tiles:
    Cells(LastMapRowStoredAtRow, 2).Value = Row + 1
    Cells(LastMapColStoredAtRow, 2).Value = Col + 1
    
    'Generate initial tiles semi-randomly (ensure mostly land, some water).
    Dim AdjacentRow, AdjacentCol, ChanceOfLand As Integer
    For AdjacentRow = Row - 1 To Row + 1
        For AdjacentCol = Col - 1 To Col + 1
            'Ensure 4 water tiles (lower border and to the right):
            If ((AdjacentRow - Row) > 0) Or ((AdjacentRow - Row) + (AdjacentCol - Col) > 0) Then
                ChanceOfLand = 0
            Else
                ChanceOfLand = 100
            End If
            Call GenerateOneNewTile(AdjacentRow, AdjacentCol, ChanceOfLand)
            'Also, generate plenty of animals to start (but none on the central tile):
            If Not (AdjacentRow = Row And AdjacentCol = Col) Then
                Call RollDiceForWildAnimal(ActiveSquareIndex, AdjacentRow, AdjacentCol, 100)  '100% chance of animal
            End If
        Next AdjacentCol
    Next AdjacentRow
    'Get the color index for this player:
    Dim UnitColor, WhoseTurn As Integer
    WhoseTurn = ((WorksheetIndex - NumReservedSheets) + 1) / 2
    UnitColor = Sheets("Map").Cells(FirstPlayerRow + WhoseTurn - 1, 2)
    Worksheets(ActiveSquareIndex).Select
    
    'Mark the starting location of the active unit:
    With Cells(Row, Col).Borders(xlDiagonalUp)
        .LineStyle = xlContinuous
        .ColorIndex = UnitColor
        .Weight = xlThick
    End With
    
    'Mark it on the Master Map as well:
    Worksheets("Map").Select
    With Cells(Row, Col).Borders(xlDiagonalUp)
        .LineStyle = xlContinuous
        .ColorIndex = UnitColor
        .Weight = xlThick
    End With
    
    Worksheets(ActiveSquareIndex).Select
    
    Cells(ActiveUnitRowStoredAtRow, 2).Value = Row
    Cells(ActiveUnitColStoredAtRow, 2).Value = Col
    
    Call CountLiberties(Row, Col)
    
    'Display a border of unexplored black tiles:
    Call UpdateHexView(Row, Col)
End Sub

Sub GenerateMapsForAllPlayers()
    Application.StatusBar = "Generate Maps For All Players ()"
    DebugRow = FirstDebugRow
    Application.ScreenUpdating = False
    
    Dim StartingRow, StartingCol As Integer
    Dim CurrentPlayerRow As Integer
    CurrentPlayerRow = FirstPlayerRow
    
    ActiveSquareIndex = NumReservedSheets + 1
    
    InitializingIsFinishedGameHasBegun = False
    Call FormatMasterMap
    
    Call FormatSpeciesSheet
    Call FormatTerrainTypesSheet
    Call BuildSpeciesListForEachTerrain
    
    Do
        ActiveHexIndex = ActiveSquareIndex + 1
        StartingRow = FirstMapRow + 2
        StartingCol = FirstMapCol + ActiveSquareIndex * NumSheetsPerPlayer
        Call FormatSquareSheet(ActiveSquareIndex)        'format the square sheet.
        Call FormatHexSheet(ActiveHexIndex)    'format the hex sheet.
        Call GenerateInitialMap(ActiveSquareIndex, StartingRow, StartingCol)
        Call UpdateHexView(StartingRow, StartingCol)
        CurrentPlayerRow = CurrentPlayerRow + 1
        ActiveSquareIndex = ActiveSquareIndex + NumSheetsPerPlayer     'skip over the hex sheets.
    Loop While Sheets("Map").Cells(CurrentPlayerRow, 1).Value <> ""

    Call GiveAnimalsThisManyTurnsHeadStart(5)
    
    ActiveSquareIndex = NumReservedSheets + 1
    ActiveHexIndex = NumReservedSheets + 2
    
    'Update all of hex view from square view (do it once, after which it is called from EndTurn):
    Call UpdateAllExploredHexes(ActiveHexIndex)
    
    InitializingIsFinishedGameHasBegun = True
    Application.ScreenUpdating = True
    Application.StatusBar = False   'returns control of the statusbar to Excel.
End Sub

Sub GiveAnimalsThisManyTurnsHeadStart(NTurns As Integer)
    Application.StatusBar = "Please wait while animals migrate"
    If NTurns < 1 Then Exit Sub
    Dim Turn As Integer
    For Turn = 1 To NTurns
        Call MakeAllAnimalsMigrate
    Next Turn
    Application.StatusBar = False
End Sub


    
'"cOlumbian eXchange wOrld eXplorer", second release (build 029.07)
'Module 2
'Model/View
'Recurring functions.

'Copyright 2016 Matthew J Curran
'
'Licensed under the Apache License, Version 2.0 (the "License");
'you may not use this file except in compliance with the License.
'You may obtain a copy of the License at
'
'    http://www.apache.org/licenses/LICENSE-2.0
'
'Unless required by applicable law or agreed to in writing, software
'distributed under the License is distributed on an "AS IS" BASIS,
'WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
'See the License for the specific language governing permissions and
'limitations under the License.

'See Module 1 for changes in this release.


Option Explicit

Sub PlantsAndAnimalsOnlyOneByOneToTwoByTwo(OriginSheet As Integer, TargetSheet As Integer, ByVal FromRow As Integer, ByVal FromCol As Integer, ByVal ULRow As Integer, ByVal ULCol As Integer)
    'Copies diagonal lines from a square tile to a hex tile (ignores everything else)
    Dim HasNature, HasUnit As Boolean
    HasNature = False
    HasUnit = False
    
    Dim Color, UnitColor As Integer
    Color = Worksheets(OriginSheet).Cells(FromRow, FromCol).Interior.ColorIndex
    
    'DiagonalUp (/) for units:
    If Worksheets(OriginSheet).Cells(FromRow, FromCol).Borders(xlDiagonalUp).LineStyle <> xlNone Then
        HasUnit = True
        UnitColor = Worksheets(OriginSheet).Cells(FromRow, FromCol).Borders(xlDiagonalUp).ColorIndex
    End If
    
    'DiagonalDown (\) for plants and animals:
    If Worksheets(OriginSheet).Cells(FromRow, FromCol).Borders(xlDiagonalDown).LineStyle <> xlNone Then
        HasNature = True
    End If

    Dim Row, Col As Integer

    For Row = ULRow To ULRow + 1
        For Col = ULCol To ULCol + 1
            If HasNature Then
                With Worksheets(TargetSheet).Cells(Row, Col).Borders(xlDiagonalDown)
                    If Color = Water Then
                        .LineStyle = xlDash
                        .Weight = xlThin
                        .ColorIndex = WildWaterCreatureColor
                    Else 'on land
                        .LineStyle = xlDashDot
                        .Weight = xlMedium
                        .ColorIndex = WildAnimalColor
                    End If
                End With
            Else
                With Worksheets(TargetSheet).Cells(Row, Col).Borders(xlDiagonalDown)
                    .LineStyle = xlNone
                End With
            End If
            
            'Placing the if-statement for Units after the if-statement for Plants/Animals ensures that the color of the unit dominates.
            If HasUnit Then
                With Worksheets(TargetSheet).Cells(Row, Col).Borders(xlDiagonalUp)
                    .LineStyle = xlContinuous
                    .ColorIndex = UnitColor
                    .Weight = xlThick
                End With
            End If
        Next Col
    Next Row
End Sub

Sub OneByOneToTwoByTwo(OriginSheet As Integer, TargetSheet As Integer, ByVal Row As Integer, ByVal Col As Integer, ByVal ULRow As Integer, ByVal ULCol As Integer)
    '(Row,Col) is the 1x1 range in the origin sheet. (ULRow,ULCol) is the Upper Left cell in the 2x2 range in the target sheet.
    'Copies everything, including comments (comments copied to upper left corner only).
    Application.StatusBar = "One By One To Two By Two (OriginSheet, TargetSheet, Row, Col, ULRow, ULCol)"
    Dim Color As Integer
    Dim OriginRng, TargetRng As Range
    Dim Cell As Object
    
    Dim HasUnit, HasPlantsOrAnimals As Boolean
    HasUnit = False
    HasPlantsOrAnimals = False
    Dim UnitColor As Integer
    
    Color = Worksheets(OriginSheet).Cells(Row, Col).Interior.ColorIndex
    
    With Worksheets(OriginSheet)
        Set OriginRng = .Range(.Cells(Row, Col).Address)
    End With
    
    'Copy all the contents/formats of the origin cell into the Upper Left corner cell alone:
    With Worksheets(TargetSheet)
        Set TargetRng = .Range(.Cells(ULRow, ULCol).Address)
    End With
    OriginRng.Copy TargetRng
    
    With Worksheets(TargetSheet)
        Set TargetRng = .Range(.Cells(ULRow, ULCol), .Cells(ULRow + 1, ULCol + 1))
    End With
       
    'Copy the color of the origin cell to all 4 target cells:
    For Each Cell In TargetRng.Cells
        Cell.Interior.ColorIndex = Color
    Next Cell
    
    'Create a border (if the tile is explored):
    If Color <> Black And Color <> Grey Then
        TargetRng.BorderAround LineStyle:=xlDot, ColorIndex:=1
    End If
    
    'Copy unit markers into all four cells, for better visibility:

    'DiagonalUp (/) for units:
    If Cells(Row, Col).Borders(xlDiagonalUp).LineStyle <> xlNone Then
        HasUnit = True
        UnitColor = Cells(Row, Col).Borders(xlDiagonalUp).ColorIndex
    End If
    
    'DiagonalDown (\) for plants and animals:
    If Cells(Row, Col).Borders(xlDiagonalDown).LineStyle <> xlNone Then
        HasPlantsOrAnimals = True
    End If

    If HasPlantsOrAnimals Then
        With TargetRng.Borders(xlDiagonalDown)
            If Color = Water Then
                .LineStyle = xlDash
                .Weight = xlThin
                .ColorIndex = WildWaterCreatureColor
            Else 'on land
                .LineStyle = xlDashDot
                .Weight = xlMedium
                .ColorIndex = WildAnimalColor
            End If
        End With
    Else
        TargetRng.Borders(xlDiagonalDown).LineStyle = xlNone
    End If
     
    'Placing the if-statement for Units after the if-statement for Plants/Animals ensures that the color of the unit dominates.
    If HasUnit Then
        With TargetRng.Borders(xlDiagonalUp)
            .LineStyle = xlContinuous
            .ColorIndex = UnitColor
            .Weight = xlThick
        End With
    Else
        TargetRng.Borders(xlDiagonalUp).LineStyle = xlNone
    End If

    Application.StatusBar = False
End Sub

Sub UpdateHexViewSeven(CenterRow, CenterCol)
    'Update only the closest 7 tiles.
    Application.StatusBar = "Update Hex View Seven (CenterRow, CenterCol)"
    Dim Row, Col, Offset, ULRow, ULCol, Counter As Integer

    'Ignore the upper left and lower right (first and last in the double for-loop),
    ' because these two corners of 3x3 are not part of hexagon:
    Counter = 1
    For Row = CenterRow - 1 To CenterRow + 1
        ULRow = (2 * Row) - 1
        Offset = Row - FirstMapRow
        For Col = CenterCol - 1 To CenterCol + 1
            ULCol = Offset + (2 * Col) - 1
            If Counter <> 1 And Counter <> 9 Then
                Call OneByOneToTwoByTwo(ActiveSquareIndex, ActiveHexIndex, Row, Col, ULRow, ULCol)
            End If
            Counter = Counter + 1
        Next Col
    Next Row
End Sub

Sub UpdateHexView(CenterRow, CenterCol)
    'Make the closest 23 tiles black (if unexplored), and then update the closest 7 tiles.
    Application.StatusBar = "Update Hex View (CenterRow, CenterCol)"
    Dim Row, Col, Offset, ULRow, ULCol, Counter As Integer

    'Ignore the upper left and lower right (first and last in the double for-loop),
    ' because these two corners of 5x5 would look too square:
    Counter = 1
    For Row = CenterRow - 2 To CenterRow + 2
        ULRow = (2 * Row) - 1
        Offset = Row - FirstMapRow
        For Col = CenterCol - 2 To CenterCol + 2
            ULCol = Offset + (2 * Col) - 1
            If Counter <> 1 And Counter <> 25 Then
                'Only make it black if it is an unexplored/unformatted tile:
                If Worksheets(ActiveHexIndex).Cells(ULRow, ULCol).Interior.ColorIndex <= 1 Then
                    Call ShowAsUndiscovered(ULRow, ULCol)
                End If
            End If
            Counter = Counter + 1
        Next Col
    Next Row
    
    Call UpdateHexViewSeven(CenterRow, CenterCol)
End Sub

Function GetHexColorCorrespondingToThisSquareViewTile(Row, Col)
    Dim Offset, ULRow, ULCol As Integer
    
    ULRow = (2 * Row) - 1
    Offset = Row - FirstMapRow
    ULCol = Offset + (2 * Col) - 1
    
    GetHexColorCorrespondingToThisSquareViewTile = Worksheets(ActiveHexIndex).Cells(ULRow, ULCol).Interior.ColorIndex
End Function

Sub UpdateOneHexFromSquare(Row, Col)
    Dim Offset, ULRow, ULCol As Integer
    
    ULRow = (2 * Row) - 1
    Offset = Row - FirstMapRow
    ULCol = Offset + (2 * Col) - 1
    Call PlantsAndAnimalsOnlyOneByOneToTwoByTwo(ActiveSquareIndex, ActiveHexIndex, Row, Col, ULRow, ULCol)
End Sub

Sub UpdateAllExploredHexes(ActiveHex As Integer)
    Application.StatusBar = "UpdateAllExploredHexes"
    
    ActiveSquareIndex = ActiveHex - 1
    ActiveHexIndex = ActiveHex
    
    Dim Row, Col, LastExploredRow, LastExploredCol, Color As Integer
    LastExploredRow = Worksheets("Map").Cells(LastMapRowStoredAtRow, 2).Value
    LastExploredCol = Worksheets("Map").Cells(LastMapColStoredAtRow, 2).Value
    
    'MsgBox ("last row and col: " & LastExploredRow & ", " & LastExploredCol)
    For Row = FirstMapRow To LastExploredRow
        For Col = FirstMapCol To LastExploredCol
            Color = GetHexColorCorrespondingToThisSquareViewTile(Row, Col)
            '<-- reveals only tiles discovered by humans.
            'Color = Worksheets(ActiveSquareIndex).Cells(Row, Col).Interior.ColorIndex  '<-- also reveals tiles explored by animals, but not yet by humans.

            If Color > 1 Then Call UpdateOneHexFromSquare(Row, Col)
        Next Col
    Next Row
    
    Application.StatusBar = False
End Sub

Sub EndTurn()
    Application.StatusBar = "End Turn ()"
    Application.ScreenUpdating = False

    Dim MovesPerTurn As Integer
    
    ActiveHexIndex = ActiveSheet.Index
    ActiveSquareIndex = ActiveHexIndex - 1
    Worksheets(ActiveSquareIndex).Select   'switch from hex to square sheet.
    
    'Update range of motion:
    MovesPerTurn = Int(Cells(LandPointsRow, 2) / 7) + 1
    Cells(MovesPerTurnRow, 2).Value = MovesPerTurn
    
    'restore full movement to all units:
    Cells(MovesRemainingRow, 2).Value = MovesPerTurn

    'Perform the previous two updates for hex view:
    With Worksheets(ActiveHexIndex)
        .Cells(MovesPerTurnRow, 2).Value = MovesPerTurn
        .Cells(MovesRemainingRow, 2).Value = MovesPerTurn
    End With
    
    Worksheets("Map").Select

    Dim OldTurnRow, NewTurnRow, nthPlayer As Integer
    OldTurnRow = Cells(TurnRowStoredAtRow, 2).Value
    NewTurnRow = OldTurnRow + 1 'the next player is one row below the previous player.
    
    'but if its blank, it means every player has played, and we start over at player 1 (on Sheet2):
    If Cells(NewTurnRow, 1) = "" Then
        Call MakeAllAnimalsMigrate
        NewTurnRow = FirstPlayerRow
    End If
     
    nthPlayer = 1 + NewTurnRow - FirstPlayerRow
    
    Cells(TurnRowStoredAtRow, 2) = NewTurnRow
            
    'Get things ready for the player whose turn is just beginning:
    ActiveSquareIndex = NumReservedSheets + 1 + (nthPlayer - 1) * NumSheetsPerPlayer
    ActiveHexIndex = ActiveSquareIndex + 1
            
    'Update all of hex view from square view:
    Call UpdateAllExploredHexes(ActiveHexIndex)
            
    'Update the 9 tiles closest to active unit (from master map to square view):
    Worksheets(ActiveSquareIndex).Select
    Dim ActiveUnitRow, ActiveUnitCol As Integer
    ActiveUnitRow = Cells(ActiveUnitRowStoredAtRow, 2)
    ActiveUnitCol = Cells(ActiveUnitColStoredAtRow, 2)
    Call UpdateFromMasterMap(ActiveUnitRow, ActiveUnitCol)
    
    'Read in the moves remaining, and update joystick display:
    Dim MovesRemaining As Integer
    MovesRemaining = Worksheets(ActiveSquareIndex).Cells(MovesRemainingRow, 2).Value
    joystick.LabelMovesRemaining.Caption = MovesRemaining
    
    'Update the nearest 7 tiles in the corresponding hex view:
    Call UpdateHexView(ActiveUnitRow, ActiveUnitCol)
    
    'Update liberties (could be affected by other players's explorations:
    Worksheets(ActiveSquareIndex).Select
    ActiveUnitRow = Cells(ActiveUnitRowStoredAtRow, 2).Value
    ActiveUnitCol = Cells(ActiveUnitColStoredAtRow, 2).Value
    Call CountLiberties(ActiveUnitRow, ActiveUnitCol)
    
    'Show the hex view:
    Worksheets(ActiveHexIndex).Select
    Application.StatusBar = False
    Application.ScreenUpdating = True
End Sub

Sub UpdateFromMasterMap(Row, Col)
    'Updates a 9 cell zone (in square view) around the given row,col.
    Application.StatusBar = "Update From Master Map (Row, Col)"
    Dim CenterOfUpdateRegionX, CenterOfUpdateRegionY As Integer
    CenterOfUpdateRegionX = Row
    CenterOfUpdateRegionY = Col
    Dim X, Y As Integer  'where Cells(x,y) is the Upper Left of the update region.
    Dim XLR, YLR As Integer  'where Cells(xlr,ylr) is the Lower Right of the update region.
    X = CenterOfUpdateRegionX - 1
    Y = CenterOfUpdateRegionY - 1
    XLR = CenterOfUpdateRegionX + 1
    YLR = CenterOfUpdateRegionY + 1
    
    'Make sure the left and top boundaries of map are not exceeded:
    If X < FirstMapRow Then X = FirstMapRow
    If Y < FirstMapCol Then Y = FirstMapCol
    
    Dim Rng1 As Range
    Dim Rng2 As Range
   
    With Sheets("Map")
        Set Rng1 = .Range(.Cells(X, Y), .Cells(XLR, YLR))
    End With
        
    With Worksheets(ActiveSquareIndex)
        Set Rng2 = .Range(.Cells(X, Y), .Cells(XLR, YLR))
    End With

    Rng1.Copy Rng2
End Sub

Sub IncrementNumLiberties()
    Application.StatusBar = "Increment Num Liberties ()"
    NumLiberties = Worksheets(ActiveSquareIndex).Cells(NumLibertiesRow, 2).Value + 1
    Worksheets(ActiveSquareIndex).Cells(NumLibertiesRow, 2).Value = NumLiberties
    Worksheets(ActiveHexIndex).Cells(NumLibertiesRow, 2).Value = NumLiberties
End Sub

Sub DecrementNumLiberties()
    Application.StatusBar = "Decrement Num Liberties ()"
    NumLiberties = Worksheets(ActiveSquareIndex).Cells(NumLibertiesRow, 2).Value - 1
    Worksheets(ActiveSquareIndex).Cells(NumLibertiesRow, 2).Value = NumLiberties
    Worksheets(ActiveHexIndex).Cells(NumLibertiesRow, 2).Value = NumLiberties
End Sub

Sub DecrementMovementsRemaining(TerrainColor As Integer)
    Application.StatusBar = "Decrement Movements Remaining ()"
    Dim TerrainRow As Integer
    TerrainRow = GetTerrainRow(TerrainColor)
    
    Dim MovementsRemaining, CostOfLastMove As Single
    CostOfLastMove = Worksheets("Terrain Types").Cells(TerrainRow, RoughnessCol).Value
    MovementsRemaining = Worksheets(ActiveSquareIndex).Cells(MovesRemainingRow, 2).Value - CostOfLastMove
    
    'Update both square and hex sheets:
    Worksheets(ActiveSquareIndex).Cells(MovesRemainingRow, 2).Value = MovementsRemaining
    Worksheets(ActiveHexIndex).Cells(MovesRemainingRow, 2).Value = MovementsRemaining
    
    'Update joystick display:
    joystick.LabelMovesRemaining.Caption = MovementsRemaining
End Sub

Sub GenerateNewTiles(Row, Col)
    'Call this whenever a unit is moved.
    '(Row,Col) is the new (current) location of the unit.
    'It will check for unexplored (black) tiles adjacent to the unit, and generate new map tile at each one.
    Application.StatusBar = "Generate New Tiles (Row, Col)"

    'Call GenerateOneNewTile() 9 times:
    Dim X, Y As Integer
    For X = -1 To 1
        For Y = -1 To 1
            'Only generate a new tile if we arent standing on it:
            If X <> 0 Or Y <> 0 Then
                'This if statement allows diagonal tiles to be treated differently:
                If X * Y = 0 Then
                    Call GenerateOneNewTile(Row + X, Col + Y, 40)
                Else
                    Call GenerateOneNewTile(Row + X, Col + Y, 40)
                End If
            End If
        Next Y
    Next X
End Sub

Sub GenerateOneNewTile(Row, Col, PercentChanceOfLand)
    Application.StatusBar = "Generate One New Tile (Row, Col, PercentChanceOfLand)"
    Dim ExistingColor As Integer
    Dim RandomNumber As Single
    Dim NewColor As Integer

    If (Row < FirstMapRow) Or (Col < FirstMapCol) Then Exit Sub 'because the top and left are reserved, and not part of map.
    
    ExistingColor = Worksheets("Map").Cells(Row, Col).Interior.ColorIndex
    
    If ExistingColor = Black Then ANewTileHasBeenExplored = True
    If ExistingColor = LibertyColor Then Call DecrementNumLiberties  'it used to be a liberty.
    
    If (ExistingColor <> Black) And (ExistingColor <> LibertyColor) Then
        Worksheets("Map").Range(Cells(Row, Col).Address).Copy Worksheets(ActiveSquareIndex).Range(Cells(Row, Col).Address)
        Exit Sub  'done, because its already generated and on master map.
    End If
    
    RandomNumber = Rnd()

    NumLiberties = Cells(NumLibertiesRow, 2).Value
    If InitializingIsFinishedGameHasBegun And NumLiberties < 2 Then
        NewColor = GetRandomLandTerrain    'if there is only one possible tile, make sure it is land!
        Call IncrementLandPoints
    Else
        If RandomNumber < (PercentChanceOfLand / 100) Then
            NewColor = GetRandomLandTerrain()
            Call IncrementLandPoints
        Else
            NewColor = Water
            Call IncrementWaterPoints
        End If
    End If
    
    Cells(Row, Col).Interior.ColorIndex = NewColor

    'Copy the new tile to the Master Map:
    Worksheets("Map").Cells(Row, Col).Interior.ColorIndex = NewColor
    Worksheets(ActiveSquareIndex).Select
    
    'Randomly generate wild animals:
    If InitializingIsFinishedGameHasBegun Then Call RollDiceForWildAnimal(ActiveSquareIndex, Row, Col, PercentChanceOfAnimals)
End Sub

Sub IncrementLandPoints()
    Application.StatusBar = "Increment Land Points ()"
    Dim LandPoints As Integer
    LandPoints = Cells(LandPointsRow, 2).Value
    LandPoints = LandPoints + 1
    Cells(LandPointsRow, 2).Value = LandPoints
    Worksheets(ActiveHexIndex).Cells(LandPointsRow, 2).Value = LandPoints
End Sub

Sub IncrementWaterPoints()
    Application.StatusBar = "Increment Water Points ()"
    Dim WaterPoints As Integer
    WaterPoints = Cells(WaterPointsRow, 2).Value
    WaterPoints = WaterPoints + 1
    Cells(WaterPointsRow, 2).Value = WaterPoints
    Worksheets(ActiveHexIndex).Cells(WaterPointsRow, 2).Value = WaterPoints
End Sub

Sub ResumeGame()
    'Determine whose turn it is, activate their hexView sheet, and show joystick.
    Application.StatusBar = "Resume Game ()"
    InitializingIsFinishedGameHasBegun = True
        
    Dim TurnRow, nthPlayersTurn, TheirSheetIndex As Integer
    TurnRow = Worksheets("Map").Cells(TurnRowStoredAtRow, 2).Value
    nthPlayersTurn = Worksheets("Map").Cells(TurnRow, 2).Value
    TheirSheetIndex = NumReservedSheets + 2 + (nthPlayersTurn - 1) * NumSheetsPerPlayer '2 because the hexView is the second sheet.
    
    ActiveHexIndex = TheirSheetIndex
    ActiveSquareIndex = TheirSheetIndex - 1
    Worksheets(TheirSheetIndex).Activate
    Call ShowJoystick
End Sub

Sub ShowAsUndiscovered(ULRow, ULCol)
    Dim Row, Col As Integer
    'Avoid accidental overwriting:
    If Worksheets(ActiveHexIndex).Cells(ULRow, ULCol).Interior.ColorIndex > 1 Then Exit Sub

    For Row = ULRow To ULRow + 1
        For Col = ULCol To ULCol + 1
            Worksheets(ActiveHexIndex).Cells(Row, Col).Interior.ColorIndex = Black
        Next Col
    Next Row
End Sub
    


'"cOlumbian eXchange wOrld eXplorer", second release (build 029.07)
'Module 3
'Controller

'Copyright 2016 Matthew J Curran
'
'Licensed under the Apache License, Version 2.0 (the "License");
'you may not use this file except in compliance with the License.
'You may obtain a copy of the License at
'
'    http://www.apache.org/licenses/LICENSE-2.0
'
'Unless required by applicable law or agreed to in writing, software
'distributed under the License is distributed on an "AS IS" BASIS,
'WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
'See the License for the specific language governing permissions and
'limitations under the License.

'See Module 1 for changes in this release.


Option Explicit

Dim ActiveUnitRow, ActiveUnitCol As Integer
Dim NewRow, NewCol As Integer  'new location of the active unit.

Sub MoveThisFarSouthAndThisFarEast(Southwards As Integer, Eastwards As Integer)
    'Moves the active unit to the specified cell (if allowed).
    'It is allowed if that tile is land.
    Application.StatusBar = "Move This Far South And This Far East (Southwards, Eastwards)"
    Application.ScreenUpdating = False
    ANewTileHasBeenExplored = False
    
    ActiveHexIndex = ActiveSheet.Index
    ActiveSquareIndex = ActiveHexIndex - 1
    Worksheets(ActiveSquareIndex).Select
    
    'Exit sub if there are no movements remaining:
    If Cells(MovesRemainingRow, 2).Value < 1 Then
        Worksheets(ActiveHexIndex).Select
        
        If EndTurnIsAutomatic Then
            Call EndTurn
        Else
            MsgBox ("out of moves")
        End If
        
        Exit Sub
    End If

    ActiveUnitRow = Cells(ActiveUnitRowStoredAtRow, 2).Value
    ActiveUnitCol = Cells(ActiveUnitColStoredAtRow, 2).Value

    NewRow = ActiveUnitRow + Southwards
    NewCol = ActiveUnitCol + Eastwards

    'Check if the new location is legal:
    'Is it water or edge of map?:
    Dim Color As Integer
    Color = Cells(NewRow, NewCol).Interior.ColorIndex
    If (Color = Grey) Or (Color = Water) Then
        MsgBox ("illegal move")
        Worksheets(ActiveHexIndex).Select
        Exit Sub
    End If
    'Is it occupied by another unit?:
    If Cells(NewRow, NewCol).Borders(xlDiagonalUp).LineStyle = xlContinuous Then
        MsgBox ("illegal move")
        Worksheets(ActiveHexIndex).Select
        Exit Sub
    End If
 
    'Get the color index for this player:
    Dim WhoseTurn, UnitColor As Integer
    WhoseTurn = Sheets("Map").Cells(TurnRowStoredAtRow, 2)
    UnitColor = Sheets("Map").Cells(WhoseTurn, 2)
    Worksheets(ActiveSquareIndex).Select
 
    'Update the record of the new location:
    Cells(ActiveUnitRowStoredAtRow, 2).Value = NewRow
    Cells(ActiveUnitColStoredAtRow, 2).Value = NewCol

    'Mark the new location:
    With Cells(NewRow, NewCol).Borders(xlDiagonalUp)
        .LineStyle = xlContinuous
        .ColorIndex = UnitColor
        .Weight = xlThick
    End With
    'Unmark the old location:
    Cells(ActiveUnitRow, ActiveUnitCol).Borders(xlDiagonalUp).LineStyle = xlNone
    
    'Mark the new and unmark the old on the Master Map:
    Worksheets("Map").Select
    With Cells(NewRow, NewCol).Borders(xlDiagonalUp)
        .LineStyle = xlContinuous
        .ColorIndex = UnitColor
        .Weight = xlThick
    End With
    Cells(ActiveUnitRow, ActiveUnitCol).Borders(xlDiagonalUp).LineStyle = xlNone
    Worksheets(ActiveSquareIndex).Select

    'Call an AI function to generate new map tiles:
    Call GenerateNewTiles(NewRow, NewCol)
    
    'Get the outermost explored limits (by any player):
    Dim LastMasterMapRow, LastMasterMapCol As Integer
    LastMasterMapRow = Worksheets("Map").Cells(LastMapRowStoredAtRow, 2).Value
    LastMasterMapCol = Worksheets("Map").Cells(LastMapColStoredAtRow, 2).Value

    If ANewTileHasBeenExplored Then
        Call CountLiberties(ActiveUnitRow, ActiveUnitCol)
        Worksheets(ActiveSquareIndex).Select
    End If
    
    'Update the limits of explored map:
    Dim LRRow, LRCol As Integer  'Lower Right.
    LRRow = NewRow + 1
    LRCol = NewCol + 1
    Dim LastMapRow, LastMapCol As Integer
    LastMapRow = Worksheets("Map").Cells(LastMapRowStoredAtRow, 2).Value
    LastMapCol = Worksheets("Map").Cells(LastMapColStoredAtRow, 2).Value
    
    If LRRow > LastMapRow Then
        Worksheets("Map").Cells(LastMapRowStoredAtRow, 2).Value = LRRow
    End If
    If LRCol > LastMapCol Then
        Worksheets("Map").Cells(LastMapColStoredAtRow, 2).Value = LRCol
    End If
    
    With Worksheets("Map")
        LastMasterMapCol = .Cells(LastMapColStoredAtRow, 2).Value
        If LRRow > LastMasterMapRow Then .Cells(LastMapRowStoredAtRow, 2).Value = LRRow
        If LRCol > LastMasterMapCol Then .Cells(LastMapColStoredAtRow, 2).Value = LRCol
    End With
    
    'Copy to hex map:
    Call UpdateHexView(NewRow, NewCol)
    
    Call DecrementMovementsRemaining(Color)
    
    'Reactivate the hex sheet:
    Worksheets(ActiveHexIndex).Select
    
    Application.ScreenUpdating = True
End Sub


Sub MoveNorth()
    Call MoveThisFarSouthAndThisFarEast(-1, 0)
End Sub

Sub MoveSouth()
    Call MoveThisFarSouthAndThisFarEast(1, 0)
End Sub

Sub MoveWest()
    Call MoveThisFarSouthAndThisFarEast(0, -1)
End Sub

Sub MoveEast()
    Call MoveThisFarSouthAndThisFarEast(0, 1)
End Sub

Sub MoveNE()
    Call MoveThisFarSouthAndThisFarEast(-1, 1)
End Sub

Sub MoveSW()
    Call MoveThisFarSouthAndThisFarEast(1, -1)
End Sub

Sub ShowJoystick()
    Application.StatusBar = "Show Joystick ()"
    joystick.Show
End Sub

Sub ShowStartButton()
    StartGameForm.Show
End Sub



'"cOlumbian eXchange wOrld eXplorer", second release (build 029.07)
'Module 4
'Model/View
'Lighthouse Search (AI to count the number of potential new land tiles)
'The lighthouse moves clockwise around coast, staying on land.
'(moves clockwise => it always tries to turn left, relative to its direction of movement).

'Copyright 2016 Matthew J Curran
'
'Licensed under the Apache License, Version 2.0 (the "License");
'you may not use this file except in compliance with the License.
'You may obtain a copy of the License at
'
'    http://www.apache.org/licenses/LICENSE-2.0
'
'Unless required by applicable law or agreed to in writing, software
'distributed under the License is distributed on an "AS IS" BASIS,
'WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
'See the License for the specific language governing permissions and
'limitations under the License.

'See Module 1 for changes in this release.


Dim Direction As String
Dim Terrain As Integer

Dim LighthouseHasMoved As Boolean

Dim LighthouseRow, LighthouseCol As Integer
Dim PreviousLHRow, PreviousLHCol As Integer  'previous location of the lighthouse.


Sub CheckForLibertyAt(Row, Col)
    '(and add it to sum if it is a potential new land tile).
    If Cells(Row, Col).Interior.ColorIndex = LibertyColor Then Exit Sub 'already counted.
    If Cells(Row, Col).Interior.ColorIndex = Black Then
        Call IncrementNumLiberties
        Cells(Row, Col).Interior.ColorIndex = LibertyColor  'mark the tile as counted.
    End If
End Sub

Sub CheckForLibertyAdjacentTo(Row, Col)
    'Application.StatusBar = "Check For Liberty Adjacent To (Row, Col)"
    'examine the four squarely adjacent tiles:
    Call CheckForLibertyAt(Row - 1, Col)
    Call CheckForLibertyAt(Row + 1, Col)
    Call CheckForLibertyAt(Row, Col - 1)
    Call CheckForLibertyAt(Row, Col + 1)
    'examine the 2 hexagonally adjacent tiles (SW and NE):
    Call CheckForLibertyAt(Row + 1, Col - 1) 'SW
    Call CheckForLibertyAt(Row - 1, Col + 1) 'NE
End Sub

Function TerrainIsLand(Terrain)
    If (Terrain = Water) Or (Terrain = Grey) Or (Terrain = Black) Or (Terrain = LibertyColor) Then
        TerrainIsLand = False
    Else
        TerrainIsLand = True
    End If
End Function

'Six nearly identical subs for six directions:
Sub TryEast()
    If LighthouseHasMoved Then Exit Sub
    Terrain = Cells(LighthouseRow, LighthouseCol + 1).Interior.ColorIndex
    If TerrainIsLand(Terrain) Then
        'since the tile to the east is known to be land, move the lighthouse there:
        Direction = "east"
        PreviousLHRow = LighthouseRow
        PreviousLHCol = LighthouseCol
        LighthouseCol = LighthouseCol + 1
        LighthouseHasMoved = True
        If DebuggingIsOn Then
            Cells(DebugRow, 1).Value = Direction
            DebugRow = DebugRow + 1
        End If
        
        Call CheckForLibertyAdjacentTo(LighthouseRow, LighthouseCol)
    End If
End Sub

Sub TrySE()
    If LighthouseHasMoved Then Exit Sub
    Terrain = Cells(LighthouseRow + 1, LighthouseCol).Interior.ColorIndex
    If TerrainIsLand(Terrain) Then
        Direction = "SE"
        PreviousLHRow = LighthouseRow
        PreviousLHCol = LighthouseCol
        LighthouseRow = LighthouseRow + 1
        LighthouseHasMoved = True
        If DebuggingIsOn Then
            Cells(DebugRow, 1).Value = Direction
            DebugRow = DebugRow + 1
        End If
        Call CheckForLibertyAdjacentTo(LighthouseRow, LighthouseCol)
    End If
End Sub

Sub TrySW()
    If LighthouseHasMoved Then Exit Sub
    Terrain = Cells(LighthouseRow + 1, LighthouseCol - 1).Interior.ColorIndex
    If TerrainIsLand(Terrain) Then
        Direction = "SW"
        PreviousLHRow = LighthouseRow
        PreviousLHCol = LighthouseCol
        LighthouseRow = LighthouseRow + 1
        LighthouseCol = LighthouseCol - 1
        LighthouseHasMoved = True
        If DebuggingIsOn Then
            Cells(DebugRow, 1).Value = Direction
            DebugRow = DebugRow + 1
        End If
        Call CheckForLibertyAdjacentTo(LighthouseRow, LighthouseCol)
    End If
End Sub

Sub TryWest()
    If LighthouseHasMoved Then Exit Sub
    Terrain = Cells(LighthouseRow, LighthouseCol - 1).Interior.ColorIndex
    If TerrainIsLand(Terrain) Then
        Direction = "west"
        PreviousLHRow = LighthouseRow
        PreviousLHCol = LighthouseCol
        LighthouseCol = LighthouseCol - 1
        LighthouseHasMoved = True
        If DebuggingIsOn Then
            Cells(DebugRow, 1).Value = Direction
            DebugRow = DebugRow + 1
        End If
        Call CheckForLibertyAdjacentTo(LighthouseRow, LighthouseCol)
    End If
End Sub

Sub TryNW()
    If LighthouseHasMoved Then Exit Sub
    Terrain = Cells(LighthouseRow - 1, LighthouseCol).Interior.ColorIndex
    If TerrainIsLand(Terrain) Then
        Direction = "NW"
        PreviousLHRow = LighthouseRow
        PreviousLHCol = LighthouseCol
        LighthouseRow = LighthouseRow - 1
        LighthouseHasMoved = True
        If DebuggingIsOn Then
            Cells(DebugRow, 1).Value = Direction
            DebugRow = DebugRow + 1
        End If
        Call CheckForLibertyAdjacentTo(LighthouseRow, LighthouseCol)
    End If
End Sub

Sub TryNE()
    If LighthouseHasMoved Then Exit Sub
    Terrain = Cells(LighthouseRow - 1, LighthouseCol + 1).Interior.ColorIndex
    If TerrainIsLand(Terrain) Then
        Direction = "NE"
        PreviousLHRow = LighthouseRow
        PreviousLHCol = LighthouseCol
        LighthouseRow = LighthouseRow - 1
        LighthouseCol = LighthouseCol + 1
        LighthouseHasMoved = True
        If DebuggingIsOn Then
            Cells(DebugRow, 1).Value = Direction
            DebugRow = DebugRow + 1
        End If
        Call CheckForLibertyAdjacentTo(LighthouseRow, LighthouseCol)
    End If
End Sub


Sub CountLibertiesInDirection(ByVal Row As Integer, ByVal Col As Integer)
    'start lighthouse at (row,col), and stop once it returns to that tile.  Moves clockwise.
    ActiveSquareIndex = ActiveSheet.Index
    Worksheets("Map").Select
    
    LighthouseRow = Row
    LighthouseCol = Col
    
    Do
        LighthouseHasMoved = False
        Select Case Direction
            Case "east"
                Call TryNW
                Call TryNE
                Call TryEast       'Only one of these functions will be executed, because each contains an Exit Sub
                Call TrySE         'to be executed in case LighthouseHasMoved.
                Call TrySW
                Call TryWest
            Case "SE"
                Call TryNE
                Call TryEast
                Call TrySE
                Call TrySW
                Call TryWest
                Call TryNW
            Case "SW"
                Call TryEast
                Call TrySE
                Call TrySW
                Call TryWest
                Call TryNW
                Call TryNE
            Case "west"
                Call TrySE
                Call TrySW
                Call TryWest
                Call TryNW
                Call TryNE
                Call TryEast
            Case "NW"
                Call TrySW
                Call TryWest
                Call TryNW
                Call TryNE
                Call TryEast
                Call TrySE
            Case "NE"
                Call TryWest
                Call TryNW
                Call TryNE
                Call TryEast
                Call TrySE
                Call TrySW
            Case Else
                MsgBox ("direction error: " & Direction)
        End Select
    Loop While ((LighthouseRow <> Row) Or (LighthouseCol <> Col))
    Worksheets(ActiveSquareIndex).Select
End Sub

Sub CountLiberties(ByVal Row As Integer, ByVal Col As Integer)
    Application.StatusBar = "Count Liberties (Row, Col)"
    If InitializingIsFinishedGameHasBegun Then Call ResetAllLibertiesToBlack
    
    'call the helper six times (just in case each direction is an independent peninsula):
    
    Direction = "east"
    Call CountLibertiesInDirection(Row, Col)
    Direction = "SE"
    Call CountLibertiesInDirection(Row, Col)
    Direction = "SW"
    Call CountLibertiesInDirection(Row, Col)
    
    Direction = "west"
    Call CountLibertiesInDirection(Row, Col)
    Direction = "NW"
    Call CountLibertiesInDirection(Row, Col)
    Direction = "NE"
    Call CountLibertiesInDirection(Row, Col)
End Sub

Sub ResetAllLibertiesToBlack()
    Worksheets(ActiveSquareIndex).Cells(NumLibertiesRow, 2).Value = 0
    Worksheets(ActiveHexIndex).Cells(NumLibertiesRow, 2).Value = 0
    Dim Row, Col, LastRow, LastCol As Integer
    LastRow = 1 + Worksheets(ActiveSquareIndex).Cells(LastMapRowStoredAtRow, 2).Value
    LastCol = 1 + Worksheets(ActiveSquareIndex).Cells(LastMapColStoredAtRow, 2).Value
    
    For Row = FirstMapRow To LastRow
        For Col = FirstMapCol To LastCol
            If Worksheets("Map").Cells(Row, Col).Interior.ColorIndex = LibertyColor Then
                Worksheets("Map").Cells(Row, Col).Interior.ColorIndex = Black
            End If
        Next Col
    Next Row
End Sub



'"cOlumbian eXchange wOrld eXplorer", second release (build 029.07)
'Module 5
'Model/View
'Animals.

'Copyright 2016 Matthew J Curran
'
'Licensed under the Apache License, Version 2.0 (the "License");
'you may not use this file except in compliance with the License.
'You may obtain a copy of the License at
'
'    http://www.apache.org/licenses/LICENSE-2.0
'
'Unless required by applicable law or agreed to in writing, software
'distributed under the License is distributed on an "AS IS" BASIS,
'WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
'See the License for the specific language governing permissions and
'limitations under the License.

'See Module 1 for changes in this release.


'The top of the "Species" worksheet is reserved for Base Species; the lower part will be used for new species which are present as herds on the map.
'When wild herds are domesticated by a player, they will be moved from "Species" to that player's "Herds" sheet.
Public Const NameCol As Integer = 1
Public Const BiomeCol As Integer = 2    'basically same as terrain index.
Public Const SpeedCol As Integer = 3    'moves per turn (not an animal's max sprinting speed).
Public Const WeightCol As Integer = 4
Public Const HungerCol As Integer = 5   'hunger endurance; can survive X turns w/o eating.
Public Const ThirstCol As Integer = 6   'thirst endurance; can survive X turns w/o fresh water.
Public Const ImmunitiesCol As Integer = 7   'list of diseases to which a herd is immune.
Public Const TurnsToTameCol As Integer = 8  'turns required before species will follow humans.
Public Const TurnsToEvolveCol As Integer = 9    'this is probably proportional to the population growth rate.
Public Const NaturalWeaponCol As Integer = 10
Public Const WeaponLengthCol As Integer = 11
Public Const NumBaseSpeciesAttributes As Integer = 11   'the number of colums used for Base Species.

'Herd attributes:
Public Const HerdFoundOnSheetCol As Integer = 12   'HerdFoundOnSheet is an index.  Is this used anywhere?
Public Const HerdRowStoredInCol As Integer = 13
Public Const HerdColStoredInCol As Integer = 14
Public Const TurnsUntilTameCol As Integer = 15
Public Const TurnsUntilEvolveCol As Integer = 16
Public Const NextEvolutionCol As Integer = 17   'NextEvolution is a string representing e.g Speed, Hunger, Weapons (it could also be stored as an int, representing a Base Attribute colum).

Public Const TitleRow As Integer = 3
Public Const FirstBaseSpeciesRow As Integer = 4     'row 1 for metadata, row 2 as space, row 3 for titles.
'Meta Data:
Public Const MetaDataRow As Integer = 1
Public LastBaseSpeciesRow As Integer   'during the game, new herds of *wild* animals will start at LWSR+3 (titles at LWSR+2).
Public Const LastBaseSpeciesRowStoredInCol As Integer = 2
Public FirstOpenHerdRow As Integer      'this is where we store info for the next wild herd generated.
Public Const FirstOpenHerdRowStoredInCol As Integer = 4

'The percent chance that a newly discovered cell has animals:
Public Const PercentChanceOfAnimals As Integer = 25     'this need not stay "Integer".

Dim AnimalHasMoved As Boolean
Dim LandAnimalHasMoved As Boolean


Sub FormatSpeciesSheet()
    Application.StatusBar = "Initialize Species ()"
    Worksheets("Species").Select
    
    'Clear the left side of the sheet:
    Range("A16:Z99").Value = ""
    
    'Adjust column width:
    Columns("A:A").ColumnWidth = 9
    Columns("B:B").ColumnWidth = 5.5
    Columns("C:C").ColumnWidth = 5
    Columns("G:G").ColumnWidth = 10
    Columns("H:H").ColumnWidth = 12
    Columns("I:I").ColumnWidth = 13
    
    Cells(MetaDataRow, LastBaseSpeciesRowStoredInCol - 1).Value = "Last Base Species Row:"
    Cells(MetaDataRow, LastBaseSpeciesRowStoredInCol).Value = 13
    
    Cells(MetaDataRow, FirstOpenHerdRowStoredInCol - 1).Value = "First Open Herd Row:"
    Cells(MetaDataRow, FirstOpenHerdRowStoredInCol).Value = 16
    
    'Species Titles:
    Cells(TitleRow, NameCol).Value = "Name"
    Cells(TitleRow, BiomeCol).Value = "Biome (Native Terrain)"
    Cells(TitleRow, SpeedCol).Value = "Speed (Moves per Turn)"
    Cells(TitleRow, HungerCol).Value = "Hunger (Turns Before Starvation)"
    Cells(TitleRow, ThirstCol).Value = "Thirst (Turns Before Die of Thirst)"
    Cells(TitleRow, ImmunitiesCol).Value = "Immunities"
    Cells(TitleRow, TurnsToTameCol).Value = "Turns to Tame"
    Cells(TitleRow, TurnsToEvolveCol).Value = "Turns to Evolve"
    Cells(TitleRow, NaturalWeaponCol).Value = "Weapon"
    Cells(TitleRow, WeaponLengthCol).Value = "Length"
    
    'Herd Titles:
    Cells(TitleRow, HerdFoundOnSheetCol).Value = "Herd Found on Sheet:"
    Cells(TitleRow, HerdRowStoredInCol).Value = "Row"
    Cells(TitleRow, HerdColStoredInCol).Value = "Col"
    Cells(TitleRow, TurnsUntilTameCol).Value = "Tame in:"
    Cells(TitleRow, TurnsUntilEvolveCol).Value = "Evolve in:"
    Cells(TitleRow, NextEvolutionCol).Value = "Next Evolution"
End Sub

Sub AddSpeciesToTerrainTypesList(NewSpecies, TerrainRow As Integer, ListCol As Integer)
'Does not check for repeats.
    Dim ExistingList, UpdatedList As String
    ExistingList = Worksheets("Terrain Types").Cells(TerrainRow, ListCol).Value
    If ExistingList = "" Then
        UpdatedList = NewSpecies
    Else
        UpdatedList = ExistingList & ", " & NewSpecies
    End If
    Worksheets("Terrain Types").Cells(TerrainRow, ListCol).Value = UpdatedList
End Sub

Sub BuildSpeciesListFor(TerrainRow As Integer, ListCol As Integer)
'This will be used for both animals and plants (hence the colum field).
'Loop through the non-empty rows of "Species".
    Dim Terrain As Integer
    Terrain = Worksheets("Terrain Types").Cells(TerrainRow, ColorIndexCol)
    
    Dim Row As Integer
    Row = FirstBaseSpeciesRow
    Dim AnimalOrPlant, BiomeName As String
    Dim Biome As Integer    'this is just the terrain for each animal. both are color indexes.
    
    Do
        BiomeName = Worksheets("Species").Cells(Row, BiomeCol).Value
        Biome = GetTerrainIndex(BiomeName)
        If Biome = Terrain Then
            AnimalOrPlant = Worksheets("species").Cells(Row, NameCol).Value
            Call AddSpeciesToTerrainTypesList(AnimalOrPlant, TerrainRow, ListCol)
        End If
        Row = Row + 1
    Loop While BiomeName <> ""
    
    LastBaseSpeciesRow = Row - 2
    FirstOpenHerdRow = LastBaseSpeciesRow + 3   'one blank row and one row for titles
    With Worksheets("Species")
        .Cells(MetaDataRow, LastBaseSpeciesRowStoredInCol).Value = LastBaseSpeciesRow
        .Cells(MetaDataRow, FirstOpenHerdRowStoredInCol).Value = FirstOpenHerdRow
    End With
End Sub

Sub BuildSpeciesListForEachTerrain()
    'loop through terrain types and call BuildSpeciesListFor().
    Dim TerrainRow As Integer
    Dim TerrainName As String
    TerrainRow = FirstTerrainTypesRow
    Do
        TerrainName = Worksheets("Terrain Types").Cells(TerrainRow, NameCol).Value
        Call BuildSpeciesListFor(TerrainRow, NativeSpeciesCol)
        TerrainRow = TerrainRow + 1
    Loop While TerrainName <> ""
End Sub

Sub RollDiceForWildAnimal(SquareViewIndex, Row, Col, PercentChanceHasAnimals)
    Dim RandomPercentage As Single
    RandomPercentage = 100 * Rnd()
    
    Dim TerrainColor As Integer  'terrain index.
    
    Dim TerrainRow As Integer   'the row in "Terrain Types" where this terrain appears.
    Dim ListOfSpecies, RandomSpecies As String
    Dim ArrayOfSpecies() As String
    Dim NumSpecies, RandomSpeciesIndex As Integer
    
    If RandomPercentage < PercentChanceHasAnimals Then
        'It has animals.  Which species?
        TerrainColor = Worksheets(SquareViewIndex).Cells(Row, Col).Interior.ColorIndex
        If TerrainColor = Black Then Exit Sub
        TerrainRow = GetTerrainRow(TerrainColor)
        If TerrainRow = 0 Then Exit Sub     'there are no animals defined for the given terrain.
        
        ListOfSpecies = Worksheets("Terrain Types").Cells(TerrainRow, NativeSpeciesCol).Value
        If ListOfSpecies = "" Then Exit Sub     'There are no speciese native to this biome.
        
        ArrayOfSpecies = Split(ListOfSpecies, ",")
        NumSpecies = 1 + UBound(ArrayOfSpecies)
        
        RandomSpeciesIndex = Int(Rnd() * NumSpecies)
        RandomSpecies = ArrayOfSpecies(RandomSpeciesIndex)
        
        'Add to maps, and to species sheet (in herd section), and to cell comment on the SquareView:
        Call AddHerdToMasterMap(Row, Col, TerrainColor)
        Call AddHerdToActiveSquare(Row, Col, TerrainColor)
        
        Call AddHerdToSpeciesSheet(ActiveSquareIndex, RandomSpecies, Row, Col)
        'call AddHerdTocomments(squareviewindex,randomspecies,row,col)
    End If
End Sub

'The following two subs could be abstracted to one sub...
Sub AddHerdToMasterMap(Row, Col, TerrainColor)
'Adds a diagonal down line (\) to indicate the presence of animals.
    With Worksheets("Map").Cells(Row, Col).Borders(xlDiagonalDown)
        .LineStyle = xlContinuous
        .Weight = xlThin
        If TerrainColor = Water Then
            .ColorIndex = WildWaterCreatureColor
        Else
            .ColorIndex = WildAnimalColor
        End If
    End With
End Sub

Sub AddHerdToActiveSquare(Row, Col, TerrainColor)
    With Worksheets(ActiveSquareIndex).Cells(Row, Col).Borders(xlDiagonalDown)
        .LineStyle = xlContinuous
        .Weight = xlThin
        If TerrainColor = Water Then
            .ColorIndex = WildWaterCreatureColor
        Else
            .ColorIndex = WildAnimalColor
        End If
    End With
End Sub

Sub AddHerdToSpeciesSheet(SquareViewIndex, AnimalName As String, AtRow, AtCol)
    'SquareViewIndex: the square view where the animal was discovered.
    '(AtRow,AtCol): the location on that square view.
    Dim Row, Col, BaseAnimalAtRow As Integer
    FirstOpenHerdRow = Worksheets("Species").Cells(MetaDataRow, FirstOpenHerdRowStoredInCol).Value
    Row = FirstOpenHerdRow  'basically renaming FirstOpenHerdRow just to give it a shorter name.
    
    'Find the animal in the Base Species (top) section of "Species"...
    BaseAnimalAtRow = GetAnimalRow(AnimalName)
    
    '...and then copy the Base Species to the open herd row:
    For Col = 1 To NumBaseSpeciesAttributes
        With Worksheets("Species")
            .Cells(Row, Col).Value = .Cells(BaseAnimalAtRow, Col).Value
        End With
    Next Col
        
    With Worksheets("Species")
        'Add herd attributes:
        .Cells(Row, HerdFoundOnSheetCol).Value = SquareViewIndex
        .Cells(Row, HerdRowStoredInCol).Value = AtRow
        .Cells(Row, HerdColStoredInCol).Value = AtCol
        .Cells(Row, TurnsUntilTameCol).Value = .Cells(Row, TurnsToTameCol)    'taming has not yet commenced.
        .Cells(Row, TurnsUntilEvolveCol).Value = .Cells(Row, TurnsToEvolveCol)   'evolution has not yet commenced.
        .Cells(Row, NextEvolutionCol).Value = ""    'no evolution chosen yet.
    End With
    
    FirstOpenHerdRow = Row + 1
    Worksheets("Species").Cells(MetaDataRow, FirstOpenHerdRowStoredInCol).Value = FirstOpenHerdRow
End Sub

Sub AddHerdToComments(Animal, Row, Col, WorksheetIndex)
    
End Sub

Function GetAnimalRow(AnimalNameString As String)
    Dim Row As Integer
    Dim AnimalName, NameInThisRow As String
    
    AnimalName = LCase(Trim(AnimalNameString))
    
    LastBaseSpeciesRow = Worksheets("Species").Cells(MetaDataRow, LastBaseSpeciesRowStoredInCol).Value
    
    For Row = FirstBaseSpeciesRow To LastBaseSpeciesRow
        NameInThisRow = Worksheets("Species").Cells(Row, NameCol).Value
        If NameInThisRow = AnimalName Then
            GetAnimalRow = Row
            Exit Function
        End If
    Next Row
    
    GetAnimalRow = 0    'executed if no match is found.
End Function

Sub ReDrawActiveUnit(SquareIndex)
    Dim Row, Col As Integer
    Row = Worksheets(SquareIndex).Cells(ActiveUnitRowStoredAtRow, 2).Value
    Col = Worksheets(SquareIndex).Cells(ActiveUnitColStoredAtRow, 2).Value
    
    With Worksheets(SquareIndex).Cells(Row, Col).Borders(xlDiagonalUp)
        .LineStyle = xlContinuous
        .ColorIndex = 1      'should be UnitColor
        .Weight = xlThick
    End With
End Sub

'>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
'Animal Movement AI. Animal Movement AI. Animal Movement AI. Animal Movement AI. Animal Movement AI. Animal Movement AI. Animal Movement AI.

Sub TryMoveThisFarSouthAndThisFarEast(SquareIndex, FromRow, FromCol, ThisFarSouth As Integer, ThisFarEast As Integer, FromTerrainColor, HerdDataRow)
    If AnimalHasMoved Then Exit Sub
    If FromTerrainColor = Black Then Exit Sub

    Dim NewRow, NewCol, Terrain As Integer
    NewRow = FromRow + ThisFarSouth
    NewCol = FromCol + ThisFarEast
    Terrain = Worksheets("Map").Cells(NewRow, NewCol).Interior.ColorIndex   'the color index of the tile we are trying to move to.
    
    'If the terrain is explored and a different terrain type, don't mess with it:
    If Not ((Terrain = Black) Or (Terrain = FromTerrainColor) Or (Terrain = LibertyColor)) Then Exit Sub
    'If this animal is a water creature, don't mess with liberties:
    If ((FromTerrainColor = Water) And (Terrain = LibertyColor)) Then Exit Sub

    'If an animal already exists on the new tile, don't mess with it any further:
    If Worksheets("Map").Cells(NewRow, NewCol).Borders(xlDiagonalDown).LineStyle <> xlNone Then Exit Sub
    
    'Generate new terrain tile (if it is unexplored):
    If ((Terrain = Black) Or (Terrain = LibertyColor)) Then
        Worksheets("Map").Cells(NewRow, NewCol).Interior.ColorIndex = FromTerrainColor
        Worksheets(SquareIndex).Cells(NewRow, NewCol).Interior.ColorIndex = FromTerrainColor
    End If
    
    'If we got past both "exit sub" commands, then we should move this animal to the new tile:
    Dim DiagonalDownColorIndex As Integer
    DiagonalDownColorIndex = Worksheets("Map").Cells(FromRow, FromCol).Borders(xlDiagonalDown).ColorIndex
    If DiagonalDownColorIndex = WildWaterCreatureColor Then
        With Worksheets(SquareIndex).Cells(NewRow, NewCol).Borders(xlDiagonalDown)
            .LineStyle = xlDash
            .Weight = xlThin
            .ColorIndex = WildWaterCreatureColor
        End With
        'Copy to master map:
        With Worksheets("Map").Cells(NewRow, NewCol).Borders(xlDiagonalDown)
            .LineStyle = xlDash
            .Weight = xlThin
            .ColorIndex = WildWaterCreatureColor
        End With
    Else    'if not WildWaterCreatureColor, it must be WildAnimalColor.
        With Worksheets(SquareIndex).Cells(NewRow, NewCol).Borders(xlDiagonalDown)
            .LineStyle = xlDash
            .Weight = xlMedium
            .ColorIndex = WildAnimalColor
        End With
        'Copy to master map:
        With Worksheets("Map").Cells(NewRow, NewCol).Borders(xlDiagonalDown)
            .LineStyle = xlDash
            .Weight = xlMedium
            .ColorIndex = WildAnimalColor
        End With
    End If
    
    'Update location in 'herd' section of "Species" sheet:
    With Worksheets("Species")
        .Cells(HerdDataRow, HerdRowStoredInCol).Value = NewRow
        .Cells(HerdDataRow, HerdColStoredInCol).Value = NewCol
    End With

    'Get the outermost explored limits (by any player):
    Dim LastMasterMapRow, LastMasterMapCol As Integer
    LastMasterMapRow = Worksheets("Map").Cells(LastMapRowStoredAtRow, 2).Value
    LastMasterMapCol = Worksheets("Map").Cells(LastMapColStoredAtRow, 2).Value
    'Check if this animal exceeded those limits:
    ActiveSquareIndex = SquareIndex
    ActiveHexIndex = ActiveSquareIndex + 1
    If NewRow > LastMasterMapRow Then
        Worksheets("Map").Cells(LastMapRowStoredAtRow, 2).Value = NewRow
    End If
    If NewCol > LastMasterMapCol Then
        Worksheets("Map").Cells(LastMapColStoredAtRow, 2).Value = NewCol
    End If

    'Erase this animal from the tile it previously occupied:
    Worksheets(SquareIndex).Cells(FromRow, FromCol).Borders(xlDiagonalDown).LineStyle = xlNone
    'Erase from master map:
    Worksheets("Map").Cells(FromRow, FromCol).Borders(xlDiagonalDown).LineStyle = xlNone
    
    AnimalHasMoved = True
End Sub

Sub TryMoveEastFrom(SquareIndex, Row, Col, HerdDataRow, Terrain)
    Call TryMoveThisFarSouthAndThisFarEast(SquareIndex, Row, Col, 0, 1, Terrain, HerdDataRow)
End Sub
Sub TryMoveSEFrom(SquareIndex, Row, Col, HerdDataRow, Terrain)
    Call TryMoveThisFarSouthAndThisFarEast(SquareIndex, Row, Col, 1, 0, Terrain, HerdDataRow)
End Sub
Sub TryMoveSWFrom(SquareIndex, Row, Col, HerdDataRow, Terrain)
    Call TryMoveThisFarSouthAndThisFarEast(SquareIndex, Row, Col, 1, -1, Terrain, HerdDataRow)
End Sub
Sub TryMoveWestFrom(SquareIndex, Row, Col, HerdDataRow, Terrain)
    Call TryMoveThisFarSouthAndThisFarEast(SquareIndex, Row, Col, 0, -1, Terrain, HerdDataRow)
End Sub
Sub TryMoveNWFrom(SquareIndex, Row, Col, HerdDataRow, Terrain)
    Call TryMoveThisFarSouthAndThisFarEast(SquareIndex, Row, Col, -1, 0, Terrain, HerdDataRow)
End Sub
Sub TryMoveNEFrom(SquareIndex, Row, Col, HerdDataRow, Terrain)
    Call TryMoveThisFarSouthAndThisFarEast(SquareIndex, Row, Col, -1, 1, Terrain, HerdDataRow)
End Sub

Sub MakeOneAnimalMigrate(HerdDataRow)
    'Do not mess with liberties (i.e. only move onto tiles where Interior.ColorIndex = Black).
    'Try moving in each direction (clockwise), with the first direction chosen randomly.
    
    AnimalHasMoved = False
    
    Dim SquareIndex, Row, Col, TerrainColorIndex As Integer
    With Worksheets("Species")
        SquareIndex = .Cells(HerdDataRow, HerdFoundOnSheetCol).Value
        Row = .Cells(HerdDataRow, HerdRowStoredInCol).Value
        Col = .Cells(HerdDataRow, HerdColStoredInCol).Value
    End With
    
    TerrainColorIndex = Worksheets("Map").Cells(Row, Col).Interior.ColorIndex
    
    If TerrainColorIndex = Black Then
        'MsgBox ("error in migration")
        Exit Sub
    End If
    
    Dim RandomNum As Single
    RandomNum = Rnd()
    
    Select Case RandomNum
        Case Is < (1 / 6)
            GoTo TryEastFirst
        Case Is < (2 / 6)
            GoTo TrySEFirst
        Case Is < (3 / 6)
            GoTo TrySWFirst
        Case Is < (4 / 6)
            GoTo TryWestFirst
        Case Is < (5 / 6)
            GoTo TryNWFirst
        Case Else
            GoTo TryNEFirst
    End Select
    
TryEastFirst:
    Call TryMoveEastFrom(SquareIndex, Row, Col, HerdDataRow, TerrainColorIndex)
TrySEFirst:
    Call TryMoveSEFrom(SquareIndex, Row, Col, HerdDataRow, TerrainColorIndex)
TrySWFirst:
    Call TryMoveSWFrom(SquareIndex, Row, Col, HerdDataRow, TerrainColorIndex)
TryWestFirst:
    Call TryMoveWestFrom(SquareIndex, Row, Col, HerdDataRow, TerrainColorIndex)
TryNWFirst:
    Call TryMoveNWFrom(SquareIndex, Row, Col, HerdDataRow, TerrainColorIndex)
TryNEFirst:
    Call TryMoveNEFrom(SquareIndex, Row, Col, HerdDataRow, TerrainColorIndex)
    
    Call TryMoveEastFrom(SquareIndex, Row, Col, HerdDataRow, TerrainColorIndex)
    Call TryMoveSEFrom(SquareIndex, Row, Col, HerdDataRow, TerrainColorIndex)
    Call TryMoveSWFrom(SquareIndex, Row, Col, HerdDataRow, TerrainColorIndex)
    Call TryMoveWestFrom(SquareIndex, Row, Col, HerdDataRow, TerrainColorIndex)
    Call TryMoveNWFrom(SquareIndex, Row, Col, HerdDataRow, TerrainColorIndex)
End Sub

Sub MakeAllAnimalsMigrate()
    'Loop through the 'herds' section of "Species" sheet, get the sheet and location of each herd,
    'and call MakeOneAnimaleMigrate(...) on each one.
    Dim TerrainName As String
    Dim HerdDataRow, FirstHerdRow, LastHerdRow, TerrainIndex As Integer
    
    LastBaseSpeciesRow = Worksheets("Species").Cells(MetaDataRow, LastBaseSpeciesRowStoredInCol).Value
    FirstOpenHerdRow = Worksheets("Species").Cells(MetaDataRow, FirstOpenHerdRowStoredInCol).Value
    
    FirstHerdRow = LastBaseSpeciesRow + 3
    LastHerdRow = FirstOpenHerdRow - 1
    
    For HerdDataRow = FirstHerdRow To LastHerdRow
        TerrainName = Worksheets("Species").Cells(HerdDataRow, BiomeCol).Value
        TerrainIndex = GetTerrainIndex(TerrainName)
        Call MakeOneAnimalMigrate(HerdDataRow)
    Next HerdDataRow
End Sub

'End of Animal Movement AI. End of Animal Movement AI. End of Animal Movement AI. End of Animal Movement AI. End of Animal Movement AI. End of Animal Movement AI.
'<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<



'"cOlumbian eXchange wOrld eXplorer", second release (build 029.07)
'Module 6
'Model/View
'Terrain.

'Copyright 2016 Matthew J Curran
'
'Licensed under the Apache License, Version 2.0 (the "License");
'you may not use this file except in compliance with the License.
'You may obtain a copy of the License at
'
'    http://www.apache.org/licenses/LICENSE-2.0
'
'Unless required by applicable law or agreed to in writing, software
'distributed under the License is distributed on an "AS IS" BASIS,
'WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
'See the License for the specific language governing permissions and
'limitations under the License.

'See Module 1 for changes in this release.


'TerainTypes:
'NameCol same as for Animals.
Public Const ColorIndexCol As Integer = 2
Public Const RoughnessCol As Integer = 3    'Roughness: the cost of movement thru this terrain.
Public Const NativeSpeciesCol As Integer = 7    'NativeSpecies: a list of species native to this terrain.
Public Const NativePlantsCol As Integer = 8
'TitleRow same as for Animals.
Public Const FirstTerrainTypesRow As Integer = 4    'row 1 for metadata, row 2 as space, row 3 for titles.


Sub FormatTerrainTypesSheet()
    Application.StatusBar = "Initialize Terrain Types ()"
    Worksheets("Terrain Types").Select
    
    'Clear the left side of the sheet:
    Range("A1:BZ99").Value = ""
    
    'Adjust column width:
    Columns("A:A").ColumnWidth = 9
    Columns("B:B").ColumnWidth = 4.5
    Columns("C:C").ColumnWidth = 3.5
    Columns("G:G").ColumnWidth = 12
    Columns("H:H").ColumnWidth = 11
    
    Cells(TitleRow, NameCol).Value = "Name"
    Cells(TitleRow, ColorIndexCol).Value = "Color Index"
    Cells(TitleRow, RoughnessCol).Value = "Cost of Movement"
    Cells(TitleRow, NativeSpeciesCol).Value = "Native Species"
    Cells(TitleRow, NativePlantsCol).Value = "Native Plants"
    
    Cells(FirstTerrainTypesRow, NameCol).Value = "Water"
    With Cells(FirstTerrainTypesRow, ColorIndexCol)
        .Value = Water
        .Interior.ColorIndex = Water
    End With
    Cells(FirstTerrainTypesRow, RoughnessCol).Value = 2
    
    Cells(FirstTerrainTypesRow + 1, NameCol).Value = "Grass"
    With Cells(FirstTerrainTypesRow + 1, ColorIndexCol)
        .Value = Grass
        .Interior.ColorIndex = Grass
    End With
    Cells(FirstTerrainTypesRow + 1, RoughnessCol).Value = 1
    
    Cells(FirstTerrainTypesRow + 2, NameCol).Value = "Forest"
    With Cells(FirstTerrainTypesRow + 2, ColorIndexCol)
        .Value = Forest
        .Interior.ColorIndex = Forest
    End With
    Cells(FirstTerrainTypesRow + 2, RoughnessCol).Value = 2
    
    Cells(FirstTerrainTypesRow + 3, NameCol).Value = "Mountains"
    With Cells(FirstTerrainTypesRow + 3, ColorIndexCol)
        .Value = Mountains
        .Interior.ColorIndex = Mountains
    End With
    Cells(FirstTerrainTypesRow + 3, RoughnessCol).Value = 4
    
    Cells(FirstTerrainTypesRow + 4, NameCol).Value = "Desert"
    With Cells(FirstTerrainTypesRow + 4, ColorIndexCol)
        .Value = Desert
        .Interior.ColorIndex = Desert
    End With
    Cells(FirstTerrainTypesRow + 4, RoughnessCol).Value = 1
End Sub

Public Function GetTerrainIndex(Name As String)
'Return the color index associated with a given terrain name.
    Dim TrimmedName As String
    TrimmedName = LCase(Trim(Name))
    Select Case TrimmedName
        Case "water"
            GetTerrainIndex = Water
        Case "grass"
            GetTerrainIndex = Grass
        Case "forest"
            GetTerrainIndex = Forest
        Case "mountains"
            GetTerrainIndex = Mountains
        Case "desert"
            GetTerrainIndex = Desert
        Case ""
            GetTerrainIndex = -1   'blank cell.
        Case Else
            MsgBox ("unknown terrain: " & Name)
    End Select
End Function

Function GetTerrainRow(ColorIndex As Integer)
'Find the row in which terrain of the given color index is stored.
    Dim Row, ColorIndexInThisRow As Integer
    Row = FirstTerrainTypesRow
    
    For Row = FirstTerrainTypesRow To 56 + FirstTerrainTypesRow  '(56 is the max number of colors in Excel)
        ColorIndexInThisRow = Worksheets("Terrain Types").Cells(Row, ColorIndexCol).Value
        If ColorIndexInThisRow = ColorIndex Then
            GetTerrainRow = Row
            Exit Function
        End If
    Next Row
    
    GetTerrainRow = 0   'executed if no match is found
End Function

Public Function GetRandomLandTerrain()  'returns a color index.
'Opportunity for algorithm!
'Ideally, this function should not be truly random, but should generate mountain ranges and expansive forests and deserts.
'Idea: even with dynamic map generation, we can still generate more than one tile at a time.

    Dim RandomPercentage As Single
    RandomPercentage = 100 * Rnd()
    
    'The likelyhood of different terrain types is not equal:
    Select Case RandomPercentage
        Case Is < 30
            GetRandomLandTerrain = Grass
        Case Is < 70
            GetRandomLandTerrain = Forest
        Case Is < 80
            GetRandomLandTerrain = Mountains
        Case Is < 100
            GetRandomLandTerrain = Desert
        Case Else
            MsgBox ("error in GetRandomLandTerrain")
    End Select
End Function



'-- Code for Forms -- Code for Forms -- Code for Forms -- Code for Forms -- Code for Forms -- Code for Forms -- Code for Forms --

'"cOlumbian eXchange wOrld eXplorer", second release (build 029.07)
'Apache License, version 2.0 (see Module 1)

'StartGameButton:

Private Sub StartGameButton_Click()
    EndTurnIsAutomatic = False
    Call GenerateMapsForAllPlayers

    Worksheets(NumReservedSheets + 2).Activate
    
    StartGameForm.Hide
    Call ShowJoystick
End Sub



'"cOlumbian eXchange wOrld eXplorer", second release (build 029.07)
'Apache License, version 2.0 (see Module 1)


'Joystick Buttons:

Private Sub CommandButtonEast_Click()
    Application.ScreenUpdating = False
    ActiveHexIndex = ActiveSheet.Index  'this works because user only sees the hex view.
    Call MoveEast
    Application.ScreenUpdating = True
End Sub

Private Sub CommandButtonNE_Click()
    Application.ScreenUpdating = False
    ActiveHexIndex = ActiveSheet.Index
    Call MoveNE
    Application.ScreenUpdating = True
End Sub

Private Sub CommandButtonNW_Click()
    Application.ScreenUpdating = False
    ActiveHexIndex = ActiveSheet.Index
    Call MoveNorth
    Application.ScreenUpdating = True
End Sub

Private Sub CommandButtonSE_Click()
    Application.ScreenUpdating = False
    ActiveHexIndex = ActiveSheet.Index
    Call MoveSouth
    Application.ScreenUpdating = True
End Sub

Private Sub CommandButtonSW_Click()
    Application.ScreenUpdating = False
    ActiveHexIndex = ActiveSheet.Index
    Call MoveSW
    Application.ScreenUpdating = True
End Sub

Private Sub CommandButtonWest_Click()
    Application.ScreenUpdating = False
    ActiveHexIndex = ActiveSheet.Index
    Call MoveWest
    Application.ScreenUpdating = True
End Sub

Private Sub EndTurnButton_Click()
    Call EndTurn
End Sub

Private Sub ToggleButtonAutoEndTurn_Click()
    If EndTurnIsAutomatic Then
        EndTurnIsAutomatic = False
    Else
        EndTurnIsAutomatic = True
    End If
End Sub

Private Sub CommandButtonUp_Click()
    ActiveWindow.SmallScroll up:=2
End Sub

Private Sub CommandButtonLeft_Click()
    ActiveWindow.SmallScroll toleft:=2
End Sub

Private Sub CommandButtonRight_Click()
    ActiveWindow.SmallScroll toright:=2
End Sub

Private Sub CommandButtonDown_Click()
    ActiveWindow.SmallScroll down:=2
End Sub


